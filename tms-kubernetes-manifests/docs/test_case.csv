"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Security","E2E","Critical","true","High","Verify a user with the 'Driver' role can successfully log into the mobile-friendly web portal and is redirected to the driver dashboard.","Critical - Failure blocks all driver-side functionality.","Medium","A user with the 'Driver' role exists and is active. The web portal is running.","1. Navigate to the driver portal login page. 2. Enter valid driver credentials. 3. Click 'Log In'. 4. Verify the URL is the driver dashboard. 5. Verify the dashboard content loads.","User is successfully authenticated and redirected to their role-specific dashboard. A secure, HttpOnly session cookie is set.","Active driver user credentials.","Playwright/Cypress, BrowserStack","2","6","2","User management (US-001, US-004), Driver Portal base (US-046)","Staging Environment","100% pass rate. Login completes in < 2 seconds.","Critical","Every build","Low","Clear browser session and cookies.","Verify HTTPS is enforced. Verify no user enumeration is possible from error messages.","Login response time < 2 seconds.","WCAG 2.1 AA compliance for the login form."
"TEST-RBAC-001","Role-Based Access Control","Security","Integration","Critical","true","High","Verify a user with the 'Driver' role can only see trips assigned to them, as per the ir.rule.","Critical - Data leak of customer or financial information if the rule fails.","High","Two drivers exist. Trip A is assigned to Driver 1. Trip B is assigned to Driver 2.","1. Authenticate as Driver 1 via API. 2. Send a request to search/read 'tms.trip' records. 3. Verify the response contains only Trip A. 4. Attempt to read Trip B's record directly by ID. 5. Verify an AccessError is returned.","The API call only returns trips assigned to the logged-in driver. Direct access to other drivers' trips is denied.","Two distinct driver users, two trips assigned to different drivers.","Pytest, Odoo Test Framework","4","12","4","RBAC implementation (US-070), Trip model (US-026)","Integration Environment","100% pass rate. Test must correctly impersonate the driver user.","Critical","Every build","Medium","Test transaction should roll back data.","This is a core security test for data segregation.","N/A","N/A"
"TEST-TRIP-001","Trip Management","Functional","E2E","High","true","High","Verify the full trip lifecycle happy path from 'Planned' to 'Paid'.","High - Failure in the core business workflow impacts operations and revenue.","High","A Dispatch Manager, Driver, and Finance Officer user exist. Master data (Customer, Vehicle) is available.","1. As Manager, create a trip (status: Planned). 2. Assign vehicle/driver (status: Assigned). 3. As Driver, start trip (status: In-Transit). 4. As Driver, upload POD (status: Delivered). 5. As Manager, complete trip (status: Completed). 6. As Officer, generate invoice (status: Invoiced). 7. As Officer, register payment (status: Paid).","The trip progresses through all states correctly. All associated records (events, POD, invoice, payment) are created and linked.","Users for each role, master data records.","Playwright/Cypress","6","24","12","All core Trip, Driver Portal, and Invoicing stories.","Staging Environment","End-to-end workflow completes without errors. All status changes are validated at each step.","High","Every release","High","Archive or delete created trip and financial records.","Each step should be performed by the correctly permissioned user.","Each state transition UI feedback should be < 2 seconds.","All forms and buttons must be accessible."
"TEST-GPS-001","GPS Tracking","Integration","System","High","true","Medium","Verify the end-to-end GPS data pipeline from the microservice to the Odoo database.","Medium - Failure impacts real-time visibility but not core transactional workflows.","High","The FastAPI microservice, RabbitMQ, and Odoo consumer are deployed. A vehicle record exists.","1. Send a mock GPS location JSON payload to the FastAPI microservice endpoint. 2. Verify the microservice logs a successful receipt and publishes a message to RabbitMQ. 3. Verify the RabbitMQ 'q.tms.location_updates' queue count increases then decreases. 4. Trigger the Odoo consumer job. 5. Query the Odoo database to verify the vehicle's location fields have been updated with the mock data.","Mock GPS data is successfully processed through the pipeline and updates the vehicle's location in the Odoo database within the 10-second latency NFR.","Vehicle record, mock GPS JSON payload.","Pytest, Postman, RabbitMQ Management UI, psql","5","16","8","GPS microservice (REQ-1-401), RabbitMQ integration (REQ-1-301)","Integration Environment","Data is updated in Odoo DB within 10 seconds of microservice ingestion.","High","Every release","Medium","Reset vehicle location data.","Microservice endpoint should be secured.","End-to-end latency < 10 seconds.","N/A"
"TEST-GSP-001","E-Invoicing","Integration","System","Critical","true","High","Verify successful e-invoice generation and IRN retrieval from the GSP sandbox API.","Critical - Failure to generate e-invoices is a compliance and revenue blocker.","High","A completed trip and a posted invoice exist. GSP sandbox credentials are configured in AWS Secrets Manager.","1. As a Finance Officer, navigate to the posted invoice. 2. Click 'Generate E-Invoice'. 3. The system calls the mock/sandbox GSP API. 4. Verify the system receives a 200 OK response with a mock IRN and QR code. 5. Verify the invoice status changes to 'Invoiced' and the trip status is updated. 6. Verify the IRN and QR code are saved against the invoice record.","A valid IRN and QR code are successfully fetched from the GSP sandbox and stored. The invoice and trip statuses are updated.","Completed trip, posted invoice, valid customer with GSTIN.","Odoo UI, Mock GSP API Server, Pytest","6","20","10","GSP Integration (REQ-1-302), Invoicing (US-037)","Integration Environment with access to GSP Sandbox","IRN is retrieved and stored successfully.","Critical","Every release","High","Reset invoice status.","API credentials must be fetched from Secrets Manager, not hardcoded.","Synchronous response or async queueing feedback within 2 seconds.","N/A"
"TEST-PERF-001","System Performance","Performance","System","High","true","High","Verify the system meets API latency and concurrent user NFRs.","High - Poor performance will lead to user rejection and operational inefficiency.","High","A dedicated performance environment is provisioned with a large, production-like dataset.","1. Run a load test simulating 100 concurrent users performing a mix of read (view trips) and write (create expense) operations. 2. Monitor key API endpoint response times (p95). 3. Monitor system resource utilization (CPU, Memory) on EKS and RDS. 4. Run frontend performance tests for Dashboard and Trip List pages.","95th percentile of GET API requests is < 200ms. Dashboard LCP is < 3 seconds. System remains stable under 100 concurrent user load.","Large dataset (e.g., 100,000 trips, 500,000 expenses).","Locust/JMeter, Lighthouse, Grafana, Prometheus","16","40","20","Full application deployment, performance environment.","Performance Environment","All performance NFRs (REQ-1-500, REQ-1-501) are met.","High","Before every major release","Very High","Reset performance test database.","N/A","Meets defined NFRs.","N/A"
"TEST-DR-001","Disaster Recovery","Non-Functional","System","High","","Low","Verify the system's disaster recovery plan meets the defined RTO and RPO.","Critical - Inability to recover from a disaster could lead to catastrophic data loss and business interruption.","Very High","The production or staging environment is fully operational. A DR plan is documented.","1. Simulate a regional AWS failure. 2. Initiate the DR plan to restore the application and database in a secondary region. 3. Measure the time taken to restore full service (RTO). 4. After restoration, validate the data to measure data loss against the last transaction before the simulated failure (RPO).","The Recovery Time Objective (RTO) is under 4 hours. The Recovery Point Objective (RPO) is under 15 minutes.","A live, transactional workload during the test.","AWS Console, Terraform, Custom validation scripts","24","","","High Availability architecture (REQ-1-502), AWS RDS Point-In-Time-Recovery.","Staging or Production (during a planned drill)","RTO < 4 hours, RPO < 15 minutes.","Critical","Annually","N/A","Decommission the DR environment after the drill.","DR environment must be as secure as production.","N/A","N/A"