"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-003","[WI-005] INFRA: Develop Core Terraform Scripts (VPC, EKS, RDS)","Create modular Terraform scripts to provision the foundational AWS infrastructure: a new VPC with public/private subnets, an Amazon EKS cluster, and an Amazon RDS for PostgreSQL 16 instance. Scripts must handle networking, security groups, and IAM roles.","Task","Sprint Backlog","Critical","devops.engineer@company.com","product.owner@company.com","2025-02-14","16.7","8","terraform,aws,eks,rds,infra","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Core System & Architecture Setup","EPIC-001","Transport Management System","SYS-SETUP-001","","Terraform,AWS (VPC, EKS, RDS, IAM)","High","High","`terraform apply` successfully provisions the resources without errors. The EKS cluster is accessible via `kubectl`. The RDS instance is in a private subnet and has security group rules allowing access from the EKS cluster's nodes.","Terraform scripts are peer-reviewed and merged. Successful `terraform apply` in staging. Connectivity tests from a bastion host pass.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","None","AWS account access","Deployment validation and connectivity tests.","First critical deployment to the staging environment.","Creates the foundational cloud infrastructure for the entire application."
"TASK-008","[WI-008] DEVOPS: Implement GitHub Actions CI Pipeline","Create a GitHub Actions workflow YAML file. The workflow triggers on pull requests, sets up Python, installs dependencies, runs linters (Flake8, Black), and executes the Pytest test suite, including coverage checks.","Task","Sprint Backlog","Critical","devops.engineer@company.com","product.owner@company.com","2025-02-14","8.3","5","ci,github-actions,devops,testing","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Core System & Architecture Setup","EPIC-001","Transport Management System","SYS-SETUP-001","","GitHub Actions,YAML,Pytest","Medium","Medium","A pull request with a failing test is blocked from merging. A pull request with code that violates Flake8 rules fails the CI check. A successful pull request runs all checks and reports a 'success' status.","CI workflow file is merged. A test pull request that fails validation is successfully blocked. A test pull request that passes is successfully marked green.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","Backend team for test suite integration","GitHub repository access","Triggering workflow with test pull requests (passing and failing).","No deployment, configuration in GitHub repository.","Establishes the automated quality gate for all future code contributions."
"TASK-001","[WI-001] BE: Scaffold 'tms_management' Odoo Addon","Create the basic file structure for the new Odoo addon, including __manifest__.py, __init__.py, and empty directories for models, views, controllers, security, and static files. The manifest must declare dependencies on 'hr', 'account', and 'web'.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-14","2","1","odoo,backend,setup","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Core System & Architecture Setup","EPIC-001","Transport Management System","SYS-SETUP-001","","Odoo,Python","Low","Low","The 'tms_management' addon can be successfully installed and uninstalled in an Odoo 18 environment. The addon appears in the Odoo Apps list with correct dependencies listed.","Initial addon directory structure committed to git. __manifest__.py file with correct dependencies is validated.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","None","None","Manual installation test in a local Odoo instance.","This is the first code artifact for the Odoo application.","Creates the foundational code structure for all Odoo-based features."
"TASK-011","[WI-009] BE: Create 'tms.vehicle' Model","Define the Python class for the 'tms.vehicle' model in `models/tms_vehicle.py`. Include all specified fields and implement a `sql_constraints` attribute to enforce the uniqueness of the 'truck_number' field.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-14","4.2","3","odoo,backend,model,master-data","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-001","Odoo,Python","Low","Low","The model is created in the database upon module installation. An attempt to create two records with the same truck number via the ORM raises a database integrity error.","Model file is peer-reviewed and merged. Unit tests for constraints are written and pass.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","None","None","Unit tests for model constraints.","Requires a schema update in the database.","Creates the vehicle master data entity, a cornerstone of the application."
"TASK-015","[WI-011] BE: Extend 'hr.employee' Model","Inherit the `hr.employee` model in a new Python file. Add the new fields: `is_driver` (Boolean), `license_number` (Char), and `license_expiry_date` (Date).","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2025-02-14","2","1","odoo,backend,model,master-data","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Master Data Management","EPIC-002","Transport Management System","US-011","TASK-001","Odoo,Python","Low","Low","After module installation, the new fields exist on the `hr_employee` table in the database.","Model extension file is peer-reviewed and merged. Database schema is verified after update.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","None","None","Schema verification.","Requires a schema update in the database.","Creates the driver master data entity by extending the base Odoo employee model."
"TASK-012","[WI-009] FE: Create 'tms.vehicle' Form and Tree Views","Create an XML file in `views/` to define the `ir.ui.view` records for the 'tms.vehicle' model's tree (list) and form views. Create the corresponding `ir.actions.act_window` and `ir.ui.menu` records.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2025-02-14","4","2","odoo,frontend,xml,view","Sprint 1","Establish core infrastructure, security, CI/CD, and foundational master data models.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-011","Odoo,XML","Low","Low","A 'Vehicles' menu item appears in the TMS application. Clicking the menu item opens a list view of vehicles. Clicking 'Create' opens a form view with all required fields.","XML view file is peer-reviewed and merged. Manual E2E test passes in the Odoo UI.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-03","2025-02-14","100%","Backend team for model details","None","Manual E2E test of the UI.","Requires an Odoo module update to apply view changes.","Provides the user interface for managing vehicle master data."
"TASK-033","[WI-017] BE: Implement 'action_assign' State Transition","On the 'tms.trip' model, add logic that transitions the state from 'Planned' to 'Assigned' when both a `vehicle_id` and `driver_id` are set and the record is saved. This can be done by overriding the `write` method.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-28","4.2","3","odoo,backend,state-machine,trip-lifecycle","Sprint 2","Implement the core operational trip lifecycle from assignment to Proof of Delivery.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-029","Odoo,Python","Medium","Low","Saving a 'Planned' trip with a vehicle and driver changes its state to 'Assigned'.","Overridden `write` method is peer-reviewed and merged. Unit tests cover the state transition logic.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-17","2025-02-28","100%","None","None","Unit tests for the state transition logic.","Changes core business logic of the trip model.","Enables the first step in operationalizing a planned trip."
"TASK-038","FE: Develop Driver Portal Trip Detail View","Create an OWL component for the trip detail view in the Driver Portal. This view will display key trip information (Source, Destination, Customer) and will contain the 'Start Trip' button. The button should only be visible if the trip state is 'Assigned'.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2025-02-28","8","5","owl,frontend,driver-portal,javascript","Sprint 2","Implement the core operational trip lifecycle from assignment to Proof of Delivery.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-049","TASK-037","Odoo,OWL,JavaScript","Medium","Low","The view correctly displays trip details fetched from the backend. The 'Start Trip' button is visible for an 'Assigned' trip and hidden for an 'In-Transit' trip.","OWL component files are peer-reviewed and merged. E2E test passes in a browser.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-17","2025-02-28","100%","Backend team for API contract","None","E2E test in a browser, responsive testing on mobile viewports.","Key UI component for the driver workflow.","Provides the primary interface for drivers to interact with their assigned trips."
"TASK-045","[WI-020] FE: Develop POD Upload OWL Component","Create the OWL component for the Driver Portal that allows a driver to choose between photo upload and e-signature. Integrate the chosen signature pad library. The component will handle form submission, calling the `action_submit_pod` backend method.","Task","Sprint Backlog","Critical","frontend.dev@company.com","product.owner@company.com","2025-02-28","12","8","owl,frontend,driver-portal,e-signature","Sprint 2","Implement the core operational trip lifecycle from assignment to Proof of Delivery.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-052","TASK-038,TASK-043,TASK-044","Odoo,OWL,JavaScript","High","Medium","The component renders correctly on a mobile screen. The user can capture a signature and it is converted to an image. The user can upload a photo. The form correctly submits all data to the backend.","OWL component is peer-reviewed. E2E tests for both photo and signature upload pass on a mobile device.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-02-17","2025-02-28","100%","Backend team for API contract","None","E2E testing on physical mobile devices.","Deploys a critical final step in the trip lifecycle for drivers.","Enables auditable proof of delivery, which is required for invoicing."
"TASK-051","[WI-023] BE: Develop GSP API Client Service and Async Fallback","Create a Python service class to encapsulate all GSP API interactions. Implement the synchronous call logic. On failure (timeout, 5xx error), enqueue a background job using Odoo's `@job` decorator to retry the operation.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-03-14","16.7","13","backend,api-integration,gsp,e-invoicing,async","Sprint 3","Deliver core financial workflow (e-invoicing) and real-time GPS tracking map.","Financial Management & Invoicing","EPIC-004","Transport Management System","US-037","TASK-050","Python,REST API,Odoo Jobs","High","High","The service class can successfully submit an invoice to the GSP sandbox. Simulating a timeout correctly creates a job in the `queue.job` table. The background job executes and retries as configured.","Code is peer-reviewed. Unit and integration tests against a mock GSP server are written and pass.","2025-01-31T09:00:00Z","2025-01-31T09:00:00Z","2025-03-03","2025-03-14","100%","DevOps for RabbitMQ setup","GSP API Sandbox","Integration tests against a mock GSP server that can simulate various error conditions.","Critical for financial compliance.","Implements the core logic for legally compliant e-invoicing in India."