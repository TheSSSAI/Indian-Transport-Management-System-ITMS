"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Check","Static Analysis & Unit Test","Code commit to a feature branch","Code linting (Flake8, Black) passes; Unit test suite passes with >80% coverage on new code (REQ-1-504); No critical issues from SonarQube.","Block pull request merge.","Development Team","Fully Automated","GitHub Actions, Pytest, SonarQube","Every commit","PR author is notified automatically.","90","0.5","Prevents broken code and low-quality code from entering the main branch."
"Staging Deployment Gate","Smoke Test & Integration Test","Merge to main/develop branch","Automated E2E smoke test suite passes; Core integration test suite passes; Deployment to staging succeeds.","Rollback deployment; Block promotion to UAT/Production; Alert team.","DevOps/QA Team","Fully Automated","GitHub Actions, Playwright, Pytest","Every merge to main","Alert sent to #devops channel; On-call engineer investigates.","85","4","Ensures the staging environment is always in a stable, testable state."
"Release Candidate Gate","UAT & Non-Functional Testing","Manual trigger before production release","Full regression suite passes; UAT sign-off from Product Owner; Performance tests meet benchmarks (REQ-1-500); Security scan shows no new critical/high vulnerabilities.","Block production deployment (Go/No-Go decision).","QA Lead, Product Owner","Partially Automated","JMeter, OWASP ZAP, Playwright, TestRail","Per release candidate","Go/No-Go meeting with all stakeholders.","98","24","Prevents critical defects, performance issues, or security risks from reaching production."