apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tms-odoo.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tms-odoo.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "tms-odoo.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secretproviderclass.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{ .Values.service.ports.metrics.port }}"
      labels:
        {{- include "tms-odoo.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tms-odoo.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: odoo
          securityContext:
            {{- toYaml .Values.odoo.securityContext | nindent 12 }}
          image: "{{ .Values.odoo.image.repository }}:{{ .Values.odoo.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.odoo.image.pullPolicy }}
          ports:
            - name: odoo-http
              containerPort: {{ .Values.odoo.ports.http }}
              protocol: TCP
            - name: odoo-longpolling
              containerPort: {{ .Values.odoo.ports.longpolling }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.ports.metrics.targetPort }}
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ include "tms-odoo.fullname" . }}
          livenessProbe:
            httpGet:
              path: /web/login
              port: odoo-http
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: odoo-http
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.odoo.resources | nindent 12 }}
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true
        - name: nginx
          securityContext:
            {{- toYaml .Values.nginx.securityContext | nindent 12 }}
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.ports.http.targetPort }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "tms-odoo.fullname" . }}
        - name: nginx-config
          configMap:
            name: {{ printf "%s-nginx" (include "tms-odoo.fullname" .) }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}