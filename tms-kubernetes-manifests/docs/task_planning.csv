"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-US070-01","Backend: Define Core Security Groups","Create the XML data files in `tms_management/security/` to define the four primary security groups: `group_tms_admin`, `group_tms_dispatch_manager`, `group_tms_finance_officer`, and `group_tms_driver`. Define a new application category for TMS.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-04","4","8","backend,security,odoo,xml","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-070","","Odoo,XML","Low","Low","The four `res.groups` records are created upon module installation. The groups are visible under a 'Transport Management' category in the Users & Companies settings.","XML file created, reviewed, and merged. Groups verified in Odoo UI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual verification after module installation.","","Foundation for the entire Role-Based Access Control system."
"TASK-US070-02","Backend: Define Model-Level Access Rights (ACLs)","Create and populate the `ir.model.access.csv` file. For each custom model (Trip, Vehicle, Expense, etc.), define the baseline CRUD (Create, Read, Update, Delete) permissions for each of the four core security groups.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-06","12","8","backend,security,odoo,csv","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-070","TASK-US070-01","Odoo","Medium","High","The `ir.model.access.csv` file is complete for all custom TMS models. Permissions align with the matrix defined in the story's ACs. The file is loaded without errors on module installation.","CSV file created, reviewed, and merged. Permissions verified via manual testing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","QA team for validation.","","Extensive manual testing across all roles.","Requires module upgrade to apply changes.","Implements the core permission model for all data."
"TASK-US001-01","Backend: Extend res.users Model and Views for Primary Role","Inherit the `res.users` model to add a `Selection` field for 'Primary Role'. Inherit the form view to add this field. The roles will be 'Admin', 'Dispatch Manager', 'Finance Officer', 'Driver'.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-11-05","3.2","1","backend,odoo,python,xml","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-001","TASK-US070-01","Odoo,Python,XML","Low","Low","The `primary_role` field exists on the `res.users` model. The 'Primary Role' dropdown is visible on the User form for Admins.","Model and view files updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual verification in UI.","","Provides the UI for assigning primary roles to users."
"TASK-US001-02","Backend: Implement Role Assignment Logic","Override the `create` and `write` methods of the `res.users` model. The logic must read the 'Primary Role' field and assign the corresponding security group, ensuring any previous primary role groups are removed to enforce mutual exclusivity.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-11-07","6.3","1","backend,odoo,python","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-001","TASK-US001-01","Odoo,Python","Medium","Low","Creating a user with role 'Dispatch Manager' adds them to the `group_tms_dispatch_manager`. Changing a user's role correctly updates their group membership.","Python file with overridden methods updated, reviewed, and merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests are required.","","Automates the core logic of role-based permission assignment."
"TASK-US001-03","QA: Develop Unit Tests for Role Assignment Logic","Write Pytest unit tests to verify the `create` and `write` method overrides. Test cases must include new user creation, role changes, and ensure only one primary role group is assigned at a time.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-11-08","4.2","1","qa,testing,pytest,odoo","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-001","TASK-US001-02","Pytest,Odoo Testing","Low","Low","Test coverage for the new logic in `res_users.py` is >80%. Tests pass for creating a user for each of the four roles.","Test suite created, reviewed, merged, and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Backend developer for logic clarification.","","Validate business logic.","","Ensures the reliability and correctness of the role assignment logic."
"TASK-US001-04","QA: Manual E2E Validation and Documentation Review","Manually test the full user creation workflow as an Admin. Verify all acceptance criteria, including error handling for duplicate emails and missing fields. Review any user-facing documentation.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-11-11","4.3","1","qa,e2e,manual-testing","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-001","TASK-US001-02","QA,Odoo","Low","Low","All ACs from US-001 are manually verified in a staging environment. Error messages are clear and user-friendly.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","End-to-end workflow validation.","","Confirms the feature works as expected from a user's perspective."
"TASK-US004-01","Backend: Implement Admin Self-Demotion Prevention","In the overridden `write` method of `res.users`, add a check to see if the current user (`self.env.user`) is the same as the user being modified. If so, and if the change would remove their administrative privileges, raise a `ValidationError`.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-11-08","3.2","2","backend,security,odoo,python","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-004","TASK-US001-02","Odoo,Python","Low","High","An Admin attempting to change their own role to a non-Admin role receives a validation error. The save operation is blocked.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests are required to validate this critical security check.","","Prevents accidental system lockout by an administrator."
"TASK-US004-02","QA: Develop Unit Test for Self-Demotion Prevention","Write a specific Pytest unit test case to verify the self-demotion prevention logic. The test should run as an Admin user, attempt to modify its own record to remove admin rights, and assert that a `ValidationError` is raised.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-11-11","3","2","qa,testing,pytest,security","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-004","TASK-US004-01","Pytest,Odoo Testing","Medium","Low","Test case successfully simulates an admin user. Test asserts that the correct exception is raised upon self-demotion attempt.","Test suite created, reviewed, merged, and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Simulate user context within tests.","","Automates validation of the self-lockout prevention feature."
"TASK-US004-03","Integration: Ensure Audit Trail for Role Changes","Verify that Odoo's `mail.thread` mixin is correctly tracking changes to the security group memberships or the custom 'Primary Role' field on the `res.users` model. If not, add `tracking=True` to the relevant field to ensure changes are logged in the chatter.","Task","Sprint Backlog","Medium","backend.dev2@company.com","product.owner@company.com","2024-11-12","2.2","2","integration,backend,audit,odoo","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-004","TASK-US001-02","Odoo,Python","Low","Low","Changing a user's role creates a log entry in the user record's chatter showing the old and new values.","Model updated with `tracking=True`, reviewed, merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual E2E test to confirm chatter logs.","","Ensures accountability and traceability for security-related changes."
"TASK-US004-04","QA: Manual E2E Validation","Manually test the role assignment workflow. Verify a role can be changed, the user's permissions update correctly, the self-demotion rule works, and the audit trail is populated.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-11-13","1.5","2","qa,e2e,manual-testing","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","User and Access Management","EPIC-001","Transport Management System","US-004","TASK-US004-01,TASK-US004-03","QA,Odoo","Low","Low","All ACs from US-004 are manually verified. The workflow is confirmed to be secure and functional.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","End-to-end workflow validation.","","Confirms the user role management feature works as expected."
"TASK-US011-01","Backend: Extend 'hr.employee' Model","Inherit the `hr.employee` model to add TMS-specific fields: `is_driver` (Boolean), `license_number` (Char), `license_expiry_date` (Date), `license_scan` (Binary), and `driver_status` (Selection).","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-07","3.8","2","backend,odoo,python,master-data","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-011","","Odoo,Python","Low","Low","The new fields are added to the `hr.employee` model and registered with the ORM. Access rights for new fields are restricted to Admins.","Python model file updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Schema verification.","Requires module upgrade.","Creates the data structure for driver-specific information."
"TASK-US011-02","Frontend: Extend 'hr.employee' Form View","Inherit the `hr.employee` form view. Add a new 'TMS Driver' tab. Place the `is_driver` checkbox outside the tab, and make the tab itself visible only when `is_driver` is True. Add the new driver-specific fields to this tab.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-08","5.2","2","frontend,odoo,xml,ui","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-011","TASK-US011-01","Odoo,XML","Medium","Low","The 'Is a Driver' checkbox is visible on the employee form. The 'TMS Driver' tab appears only when the checkbox is ticked.","XML view file updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual UI testing for conditional visibility.","","Provides the user interface for managing driver-specific data."
"TASK-US011-03","Backend: Add Validation for Mandatory Driver Fields","Implement a Python constraint (`@api.constrains`) on the `hr.employee` model that triggers if `is_driver` is True. The constraint must ensure that `license_number` and `license_expiry_date` are not empty.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-11-11","3.2","2","backend,odoo,python,validation","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-011","TASK-US011-01","Odoo,Python","Low","Low","Saving an employee with `is_driver`=True but no license number fails with a validation error.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests for the constraint.","","Ensures data integrity for driver compliance records."
"TASK-US011-04","QA: Develop Unit Tests and E2E Validation","Write unit tests for the mandatory field constraint. Manually perform E2E testing of the full workflow: create an employee, designate them as a driver, fill in details, save, and verify they appear in trip assignment lists.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-11-12","5.3","2","qa,testing,pytest,e2e","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-011","TASK-US011-03,TASK-US011-02","Pytest,QA,Odoo","Low","Low","Unit tests for the constraint pass. All ACs for US-011 are manually verified. The conditional UI visibility works as expected.","Test suite created/updated and passing in CI. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests and manual end-to-end verification.","","Validates the correctness and completeness of the driver record feature."
"TASK-US015-01","Backend: Extend 'res.partner' Model and Views","Inherit the `res.partner` model to add any TMS-specific fields (e.g., a boolean `is_tms_customer`). Inherit the form view to ensure the GSTIN field (`vat` field in Odoo) is visible and marked as mandatory for TMS customers.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-08","5","2","backend,odoo,python,master-data","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-015","","Odoo,Python,XML","Low","Low","The `res.partner` model is successfully inherited. The GSTIN field is present and correctly configured on the contact form.","Model and view files updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","UI verification.","","Creates the data structure for customer information."
"TASK-US015-02","Backend: Implement GSTIN Format Validation","Add a Python constraint (`@api.constrains`) on the `res.partner` model, specifically on the `vat` field. This constraint will use a regular expression to validate the format of the Indian GSTIN.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-11-12","4.2","2","backend,odoo,python,validation","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-015","TASK-US015-01","Odoo,Python,Regex","Low","Low","Saving a partner with a valid GSTIN format succeeds. Saving a partner with an invalid GSTIN format raises a `ValidationError`.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests for the regex logic.","","Ensures data integrity for customer tax information, critical for invoicing."
"TASK-US015-03","QA: Develop Unit Tests for GSTIN Validation","Write Pytest unit tests for the GSTIN format validation constraint. Include test cases for valid formats, formats with incorrect length, and formats with incorrect patterns.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-11-13","5","2","qa,testing,pytest,odoo","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-015","TASK-US015-02","Pytest,Odoo Testing","Low","Low","Tests for several valid GSTINs pass. Tests for several invalid GSTINs correctly raise a `ValidationError`.","Test suite created/updated and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Validate business logic.","","Automates validation of the GSTIN format rule."
"TASK-US015-04","QA: Manual E2E Validation of Customer Creation","Manually test the full workflow for creating a new customer. Verify all acceptance criteria, including mandatory field validation and the GSTIN format check. Confirm the new customer defaults to 'Active' status.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-11-14","4.5","2","qa,e2e,manual-testing","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-015","TASK-US015-02","QA,Odoo","Low","Low","All ACs for US-015 are manually verified in a staging environment. The user experience is smooth and error messages are clear.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","End-to-end workflow validation.","","Confirms the feature works as expected from a user's perspective."
"TASK-US006-01","Backend: Define 'tms.vehicle' Model","Create the `tms.vehicle` model in Python. Define all fields as specified in REQ-1-200, including Truck Number, Model, Capacity (Tons), Ownership Type, Fuel Type, and service dates. Implement `_sql_constraints` to enforce the uniqueness of the 'Truck Number' field.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-11","6","3","backend,odoo,python,master-data","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-006","","Odoo,Python","Low","Low","The `tms.vehicle` model is created and registered with the Odoo ORM. The SQL constraint for unique truck number is defined.","Python file created, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Schema verification and unit tests for constraints.","","Creates the foundational data structure for the entire vehicle fleet."
"TASK-US006-02","Backend: Implement Truck Number Format Validation","Add a Python constraint (`@api.constrains`) to the `tms.vehicle` model to validate the 'Truck Number' field against a regular expression for standard Indian vehicle registration numbers.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-11-12","4.2","3","backend,odoo,python,validation","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-US006-01","Python,Odoo,Regex","Medium","Low","Saving a vehicle with a valid truck number succeeds. Saving a vehicle with an invalid format raises a `ValidationError`.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit tests for the regex logic.","","Ensures data quality and compliance for vehicle registration numbers."
"TASK-US006-03","Frontend: Create Vehicle Views and Menu Items","Create the XML files to define the form, tree (list), and search views for the `tms.vehicle` model. Also define the `ir.actions.act_window` and `ir.ui.menu` records to make the vehicle management interface accessible from the TMS application menu.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-13","6","3","frontend,odoo,xml,ui","Sprint 1","Establish the core RBAC framework, user management, and foundational master data models (Driver, Customer, Vehicle) with basic views and validation.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-US006-01","Odoo,XML","Low","Low","A 'Vehicles' menu item appears in the TMS application. The list and form views render correctly.","XML file created, reviewed, and merged. UI verified manually.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual UI verification.","","Provides the user interface for managing the vehicle fleet."
"TASK-US070-03","Backend: Implement Record-Level Security for Driver Role","Create an `ir.rule` record for the 'Driver' role. This rule will apply a domain filter on the `tms.trip` model to ensure a user in the driver group can only read/write trip records where their `employee_id` matches the trip's `driver_id`.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-19","10.3","8","backend,security,odoo,python,xml","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","User and Access Management","EPIC-001","Transport Management System","US-070","TASK-US070-01,TASK-US026-01","Odoo,Python,XML","High","High","An `ir.rule` record for `tms.trip` is defined and applied only to the Driver group. The rule's domain correctly filters trips based on the logged-in user's employee ID.","XML file with rule created, reviewed, and merged. Automated tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","QA for extensive validation.","","Automated integration tests and manual E2E testing are critical.","Module upgrade required.","Enforces critical data segregation for the Driver role, preventing unauthorized data access."
"TASK-US070-04","Frontend: Implement Field-Level and UI Security","Review all XML views (forms, lists, etc.) and apply the `groups` attribute to fields, buttons, and menu items to enforce UI-level security. This includes hiding financial fields from the Driver role on the trip form and hiding administrative menus from non-Admin roles.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-22","14.3","8","frontend,security,odoo,xml","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","User and Access Management","EPIC-001","Transport Management System","US-070","TASK-US070-01","Odoo,XML","Medium","Medium","Financial fields are hidden for Drivers. Action buttons are hidden for unauthorized roles. Menus are hidden for unauthorized roles.","All relevant view files updated, reviewed, and merged. Manual E2E testing passed.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","QA team.","","Manual E2E testing for each role.","Requires module upgrade.","Implements the principle of least privilege at the user interface level."
"TASK-US070-05","QA: Develop Integration Tests for Critical Security Rules","Create automated integration tests using Pytest to verify the most critical security rules. This must include a test for the Driver's record rule on `tms.trip` and a test to ensure a non-Admin role cannot write to a protected model.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-11-26","16.7","8","qa,testing,pytest,security,odoo","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","User and Access Management","EPIC-001","Transport Management System","US-070","TASK-US070-02,TASK-US070-03","Pytest,Odoo Testing","High","Medium","An automated test asserts that each driver can only access their own trip. An automated test asserts that an `AccessError` is raised for unauthorized actions.","Test suite created, reviewed, merged, and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","Backend developer.","","Complex test setup involving user impersonation.","","Provides an automated safety net for critical security rules."
"TASK-US026-01","Backend: Define 'tms.trip' Model","Create the core `tms.trip` model in Python. Define all necessary fields, including Many2one relationships to customer, route, material, vehicle, and driver. Implement the `state` field as a `Selection` field with the full lifecycle ('planned', 'assigned', 'in_transit', etc.) and set 'planned' as the default.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-11-20","12","5","backend,odoo,python,trip-management","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-026","TASK-US015-01","Odoo,Python","Medium","Low","The `tms.trip` model is created and registered with the ORM. All relationship fields and standard fields are defined with correct types.","Python file created, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Schema verification.","Requires module upgrade.","Creates the central data model for the entire application."
"TASK-US026-02","Frontend: Create Trip Views (Form, Tree, Kanban)","Develop the XML views for the `tms.trip` model. The form view should be well-structured with logical groups for route, material, and financial details. The tree and kanban views should provide a summary of key trip information.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-25","8.3","5","frontend,odoo,xml,ui","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-026","TASK-US026-01","Odoo,XML","Medium","Low","The form, tree, and kanban views are created and render without errors. A `statusbar` widget is included on the form view.","XML file created, reviewed, and merged. UI verified manually.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Manual UI verification.","","Provides the primary user interface for managing trips."
"TASK-US026-03","Backend: Implement Trip Creation Validation Logic","Add Python constraints (`@api.constrains`) to the `tms.trip` model to enforce BR-006 (mandatory Customer, Source, Destination) and BR-008 (Expected Delivery Date cannot be in the past).","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-11-26","5.2","5","backend,odoo,python,validation","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-026","TASK-US026-01","Odoo,Python","Low","Low","Saving a trip without a customer fails with a validation error. Saving a trip with a past delivery date fails with a validation error.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit tests for constraints.","","Ensures foundational data integrity for all trip records."
"TASK-US009-01","Backend: Define 'tms.vehicle.document' Model","Create a new model `tms.vehicle.document` with fields for `vehicle_id` (Many2one), `document_type` (Selection), `expiry_date` (Date), and `attachment` (Binary). Define access rights for this model in `ir.model.access.csv`.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-21","4.2","5","backend,odoo,python,master-data","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US006-01","Odoo,Python","Low","Low","The model is created and registered with the ORM. Fields have correct data types and constraints. Admin group has full CRUD access.","Python file and CSV updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Schema verification.","","Creates the data structure for vehicle compliance documents."
"TASK-US009-02","Frontend: Integrate Document List into Vehicle Form View","Inherit the `tms.vehicle` form view and add a 'Documents' tab. Inside this tab, add a One2many field linking to `tms.vehicle.document`. Define an editable tree view for this field to show Document Type, Expiry Date, and the attachment.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-27","6.2","5","frontend,odoo,xml,ui","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US009-01","Odoo,XML","Low","Low","The 'Documents' tab is visible on the vehicle form. An Admin can add, edit, and delete document lines directly from the vehicle form.","XML file updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Manual UI testing.","","Provides the UI for managing vehicle compliance documents."
"TASK-US009-04","Backend: Create Scheduled Action for Expiry Alerts","Create an `ir.cron` record via an XML data file. This scheduled action will call a method on the `tms.vehicle.document` model that searches for documents expiring within the configured intervals (e.g., 30, 15, 7 days).","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-11-28","6.3","5","backend,odoo,python,cron","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US009-01","Odoo,Python,XML","Medium","Low","A new Scheduled Action for checking document expiries is created in Odoo. The action is configured to run daily.","XML data and Python files updated, reviewed, and merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit test for the query logic.","Cron job must be enabled in production config.","Enables the proactive alerting system for compliance."
"TASK-US027-02","Backend: Implement Vehicle Capacity Validation","Add a Python constraint (`@api.constrains`) to the `tms.trip` model that validates the assigned vehicle's capacity against the trip's weight. This constraint should trigger on save if both `vehicle_id` and `weight` are set.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-11-28","4.2","5","backend,odoo,python,validation","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-US026-01","Odoo,Python","Low","Low","Saving a trip where weight > vehicle capacity fails with a `ValidationError`. The error message is clear.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit tests.","","Prevents vehicle overloading, ensuring safety and compliance."
"TASK-US027-03","Backend: Implement Automatic State Transition","Override the `write` method of the `tms.trip` model. Add logic to check if a `vehicle_id` and `driver_id` have been set on a trip that is in 'planned' state. If so, automatically change the state to 'assigned'.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-11-29","5","5","backend,odoo,python,state-machine","Sprint 2","Harden the security model with record-level rules, build the core trip creation workflow, and implement vehicle document management foundations.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-US026-01","Odoo,Python","Low","Low","When a driver and vehicle are assigned to a 'planned' trip and saved, the trip's state becomes 'assigned'.","Python file updated, reviewed, merged. Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit tests.","","Automates the trip lifecycle progression from planning to assignment."
"TASK-US070-06","QA: Comprehensive Manual RBAC Validation","Execute a comprehensive manual test plan that covers the entire permission matrix. This involves logging in as each of the four primary roles and systematically attempting to access every feature and perform every CRUD action, verifying that permissions are enforced as expected.","Task","Sprint Backlog","Critical","qa.engineer1@company.com","product.owner@company.com","2024-12-09","32","8","qa,security,e2e,manual-testing","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","User and Access Management","EPIC-001","Transport Management System","US-070","TASK-US070-02,TASK-US070-03,TASK-US070-04","QA,Odoo","High","High","A test matrix (Role vs. Feature/Model vs. Permission) is created and executed. All ACs for US-070 are manually verified.","Test matrix executed and signed off. No critical security bugs found.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","All developers to fix identified bugs.","","Exhaustive manual testing of the entire application surface.","","Provides final sign-off on the security and correctness of the RBAC implementation."
"TASK-US009-03","Integration: Configure Attachment Storage with S3","Ensure Odoo's system parameters are configured to use an S3 bucket for storing `ir.attachment` files. This involves setting the `ir_attachment.location` parameter and ensuring the necessary credentials are available to the Odoo instance (e.g., via IAM roles).","Task","Sprint Backlog","High","devops.engineer1@company.com","product.owner@company.com","2024-12-04","8.3","5","devops,aws,s3,integration,odoo","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US009-01","Odoo Administration,AWS S3,IAM","Medium","High","Uploading a document via the Odoo UI results in the file being created in the designated S3 bucket. The uploaded document can be successfully retrieved and downloaded.","Terraform script for S3 bucket is created. Odoo config is documented and applied. E2E test passes.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","Backend developer to test the integration.","AWS Account Access","E2E testing of file upload/download.","Requires AWS credentials to be securely provided to the Odoo environment.","Ensures scalable, secure, and persistent storage for all system documents as per architectural requirements."
"TASK-US009-05","QA: Develop Unit Test for Expiry Check Logic","Write a Pytest unit test for the scheduled action's method. Create test documents with expiry dates at T+30, T+15, T+7, and other dates. Call the method and assert that it returns only the correct documents.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-12-05","6","5","qa,testing,pytest,odoo","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US009-04","Pytest,Odoo Testing","Low","Low","The test correctly identifies documents expiring in 30, 15, and 7 days. Test coverage for the cron method is >80%.","Test suite created/updated and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Date/time mocking may be required.","","Automates validation of the compliance alert logic."
"TASK-US009-06","QA: E2E Validation of Document Management","Manually test the full document upload, view, and download workflow. Verify all acceptance criteria, including file type/size validation and S3 storage confirmation.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-06","6.3","5","qa,e2e,manual-testing,s3","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Master Data Management","EPIC-002","Transport Management System","US-009","TASK-US009-02,TASK-US009-03","QA,Odoo,AWS S3","Medium","Low","All ACs for US-009 are manually verified. Uploading a file stores it in S3, not the local filesystem.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","DevOps to confirm S3 storage.","","End-to-end workflow validation.","","Confirms the vehicle document feature is complete and secure."
"TASK-US027-01","Backend: Implement Domain Filters for Resource Selection","In the `tms.trip` XML form view, add `domain` attributes to the `vehicle_id` and `driver_id` Many2one fields. The domains must filter out inactive resources, drivers with expired licenses, and resources currently on another 'In-Transit' trip.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-12-05","8.3","5","backend,odoo,xml,trip-management","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-US026-02,TASK-US006-01,TASK-US011-01","Odoo,XML","Medium","Medium","The vehicle and driver selection lists are correctly filtered based on availability and compliance status.","XML view updated, reviewed, and merged. Manual tests with prepared data passed.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Requires complex test data setup to verify all filter conditions.","","Improves operational efficiency and prevents assignment errors."
"TASK-US027-04","QA: Develop Unit Tests for Assignment Logic","Write Pytest unit tests for the capacity validation constraint and the automatic state transition logic in the `write` method.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-09","8.3","5","qa,testing,pytest,odoo","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-US027-02,TASK-US027-03","Pytest,Odoo Testing","Medium","Low","A test for the capacity constraint correctly raises a `ValidationError`. A test for the state transition correctly asserts the new 'assigned' state.","Test suite updated and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Validate business logic.","","Automates validation of trip assignment business rules."
"TASK-US027-05","QA: Comprehensive E2E Validation of Trip Assignment","Prepare a comprehensive test dataset with various vehicles and drivers (active, inactive, expired license, on-trip, etc.). Manually test the entire assignment workflow, verifying that the dropdown filters and save validations work for all scenarios defined in the ACs.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-12","14","5","qa,e2e,manual-testing","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-027","TASK-US027-01,TASK-US027-02,TASK-US027-03","QA,Odoo","High","Low","All ACs for US-027 are manually verified in a staging environment. The combination of domain filters and Python constraints correctly enforces all business rules.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Requires extensive and accurate test data setup.","","Confirms the trip assignment feature is robust and ready for production."
"TASK-US006-04","QA: Develop Unit Tests for Vehicle Model Constraints","Write Pytest unit tests for the `tms.vehicle` model. Specifically, test the uniqueness constraint by attempting to create two vehicles with the same truck number, and test the format validation with a set of valid and invalid truck numbers.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-03","5","3","qa,testing,pytest,odoo","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-US006-01,TASK-US006-02","Pytest,Odoo Testing","Low","Low","A test case for the uniqueness constraint passes. Test cases for format validation pass for both valid and invalid inputs.","Test suite created/updated and passing in CI.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Validate business logic.","","Automates validation of vehicle master data integrity rules."
"TASK-US006-05","QA: E2E Validation of Vehicle CRUD","Manually test the end-to-end user flow for creating a new vehicle. Verify all acceptance criteria, including error messages for duplicate and invalid truck numbers, and missing mandatory fields.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-12-04","3.5","3","qa,e2e,manual-testing","Sprint 3","Finalize and validate the complete RBAC model, complete the trip assignment workflow, and configure S3 integration for document storage.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-US006-03","QA,Odoo","Low","Low","All ACs for US-006 are manually verified. UI is responsive and error messages are clear. Access is correctly restricted to the Admin role.","Test cases executed and passed. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","End-to-end workflow validation.","","Confirms the vehicle creation feature works as expected."
"TASK-US046-01","Backend: Create Driver Portal Controller","Create a new Odoo controller (e.g., `portal.py`) to handle routes for the driver portal, starting with the login page (`/my/login`). This controller will render the login template and handle the POST request for authentication, using Odoo's standard session management.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-12-18","8.3","5","backend,odoo,python,portal","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-046","","Odoo,Python","Medium","Medium","Accessing `/my/login` returns the login page. Submitting valid credentials authenticates the user and redirects to the driver dashboard.","Controller created, reviewed, merged. Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","Frontend developer for API contract.","","Integration tests for authentication.","","Creates the secure entry point for all driver-facing features."
"TASK-US046-02","Frontend: Develop OWL Component for Login Form","Create an OWL component for the login form UI. This component will be responsible for rendering the input fields and button, handling user input, and making the POST request to the login controller. The design must be mobile-first and fully responsive.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-12-20","12","5","frontend,owl,javascript,css,ui","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-046","TASK-US046-01","OWL,JavaScript,CSS/SCSS","Medium","Low","The login form renders correctly on viewports from 360px upwards. All UI elements are functional and meet accessibility standards.","OWL component files created, reviewed, and merged. Manual tests passed.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Manual testing on multiple devices/emulators for responsiveness.","Requires asset compilation.","Provides the user interface for driver authentication."
"TASK-US046-03","Backend: Implement Redirection and Inactive User Logic","Enhance the login controller to check if the authenticated user is in the 'Driver' group. If not, redirect them away from the driver portal. Also, implement the check for inactive users and return a specific error message.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-12-23","6","5","backend,odoo,python,security","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-046","TASK-US046-01","Odoo,Python","Low","Low","A non-driver user is redirected. An inactive driver receives the correct error.","Python file updated, reviewed, merged. Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Integration tests.","","Secures the driver portal and enforces user lifecycle rules."
"TASK-US046-04","QA: Develop Integration and E2E Tests for Login","Create integration tests for the login controller, covering success, invalid password, non-existent user, and inactive user scenarios. Perform manual E2E testing on both iOS and Android devices/emulators to verify responsiveness, accessibility, and overall user experience.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-26","15","5","qa,testing,pytest,e2e,mobile","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-046","TASK-US046-02,TASK-US046-03","Pytest,Odoo Testing,Playwright/Cypress,QA","Medium","Low","Automated tests for all backend logic paths are passing. All ACs for US-046 are manually verified.","Test suite created/updated and passing in CI. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Both automated and manual testing on mobile viewports.","","Confirms the driver login feature is secure, reliable, and user-friendly."
"TASK-US047-01","Backend: Create Controller Endpoint for Driver's Trips","Create a new endpoint in the portal controller that returns a JSON list of trips. The endpoint must be authenticated and use the current user's ID to filter trips, ensuring a driver only sees their own. Implement pagination for the 'past trips' query.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-12-19","7.2","3","backend,odoo,python,api,portal","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-047","TASK-US046-01,TASK-US070-03","Odoo,Python","Low","Low","The endpoint returns a 403 error if accessed by an unauthenticated user. The returned JSON data is correctly filtered for the logged-in driver.","Controller updated, reviewed, merged. Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","Frontend developer for API contract.","","Integration tests for data scoping and authentication.","","Provides the data backend for the driver's primary workflow view."
"TASK-US047-02","Frontend: Develop OWL Component for Trip List","Create an OWL component that fetches data from the new controller endpoint. The component should have tabs for 'Current' and 'Past' trips and render the results in a mobile-friendly card layout. Implement lazy loading/infinite scroll for the 'Past' trips tab.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-12-24","12","3","frontend,owl,javascript,css,ui","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-047","TASK-US047-01","OWL,JavaScript,CSS/SCSS","Medium","Low","The component correctly fetches and displays current trips on load. Switching to the 'Past' tab fetches and displays historical trips. Scrolling triggers lazy loading.","OWL component files created, reviewed, and merged. Manual tests passed.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Manual testing for UI states and responsiveness.","","Provides the driver's main interface for viewing their work."
"TASK-US047-03","QA: Test Trip List Functionality and Security","Develop integration tests for the controller endpoint, verifying data scoping and pagination. Perform manual E2E testing of the UI on mobile viewports, including the 'no trips' case and lazy loading with a large dataset.","Task","Sprint Backlog","High","qa.engineer1@company.com","product.owner@company.com","2024-12-27","9.3","3","qa,testing,pytest,e2e,mobile","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Driver Portal and Mobile Experience","EPIC-004","Transport Management System","US-047","TASK-US047-02","Pytest,QA,Odoo","Medium","Low","Automated test confirms a driver can only fetch their own trips. Manual tests verify all ACs for US-047.","Test suite updated and passing in CI. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Requires a large test dataset for pagination/lazy loading tests.","","Confirms the driver's trip list feature is correct, secure, and performant."
"TASK-US031-01","Backend: Create Trip Cancellation Wizard","Create a `TransientModel` for the cancellation wizard. The model will have a `trip_id` and a mandatory `reason` text field. The wizard will be opened by a button on the trip form.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-12-19","6","2","backend,odoo,python,xml,wizard","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-031","TASK-US026-02","Odoo,Python,XML","Low","Low","The wizard model and its form view are created. A button on the trip form successfully opens the wizard in a modal.","Wizard model and view files created, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Manual UI testing.","","Provides the UI for capturing mandatory cancellation reasons."
"TASK-US031-02","Backend: Implement Cancellation Logic","Create the action method on the cancellation wizard. This method will: 1) Change the related trip's state to 'canceled'. 2) Post the cancellation reason to the trip's chatter. 3) Trigger a notification to the assigned driver. 4) Update the status of the assigned vehicle/driver if necessary.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-12-23","8.3","2","backend,odoo,python,state-machine","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-031","TASK-US031-01","Odoo,Python","Medium","Low","Executing the wizard's action changes the trip state to 'canceled'. The reason is logged in the trip's chatter. A notification is sent to the driver.","Python file updated, reviewed, merged. Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Integration tests.","","Implements the core business logic for trip cancellation."
"TASK-US031-03","Frontend: Implement Conditional UI for Cancel Button","In the `tms.trip` form view XML, use the `attrs` attribute on the 'Cancel Trip' button to make it invisible or disabled if the trip's state is 'delivered', 'completed', 'invoiced', or 'paid'.","Task","Sprint Backlog","Medium","frontend.dev1@company.com","product.owner@company.com","2024-12-20","3","2","frontend,odoo,xml,ui","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-031","TASK-US031-01","Odoo,XML","Low","Low","The 'Cancel Trip' button is visible on a trip in 'Assigned' state. The 'Cancel Trip' button is NOT visible on a trip in 'Delivered' state.","XML file updated, reviewed, and merged.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Manual UI testing with trips in different states.","","Ensures users can only perform valid state transitions."
"TASK-US031-04","QA: Develop Integration and E2E Tests","Create an integration test to verify the wizard's action method correctly changes the trip state, logs the reason, and triggers the notification. Manually perform E2E testing for the entire cancellation flow.","Task","Sprint Backlog","Medium","qa.engineer1@company.com","product.owner@company.com","2024-12-27","9.2","2","qa,testing,pytest,e2e","Sprint 4","Launch the foundational Driver Portal: enable driver login, trip viewing, and implement the trip cancellation workflow for dispatchers.","Trip Lifecycle Management","EPIC-003","Transport Management System","US-031","TASK-US031-02,TASK-US031-03","Pytest,Odoo Testing,QA","Medium","Low","An automated test confirms the state change and chatter post. All ACs for US-031 are manually verified.","Test suite updated and passing in CI. QA sign-off provided.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","E2E validation of the entire workflow.","","Confirms the trip cancellation feature is working correctly and securely."