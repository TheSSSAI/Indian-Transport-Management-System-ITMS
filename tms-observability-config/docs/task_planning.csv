"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-1101","Define Core Security Groups (Roles) in XML","Create the four primary security groups (Admin, Dispatch Manager, Finance Officer, Driver) as `res.groups` records in a security XML data file. Define a category for them.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-01-17","3.17","2","backend,security,odoo-xml","Sprint 1","Establish the foundational security and user management framework, including login and Role-Based Access Control (RBAC).","Core System & Foundation","EPIC-001","Transport Management System","US-004","TASK-9999","Odoo Development,XML","Low","Low","The four groups are visible in Odoo at Settings > Users & Companies > Groups.","Code reviewed; Deployed to dev; Verified in UI.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-06","2025-01-17","100%","N/A","N/A","Manual verification in the Odoo UI.","Included in the base module's data files.","Enforces a secure and manageable RBAC system."
"TASK-1201","Define Model-Level Access Rights (ACLs)","Create the `ir.model.access.csv` file to define the base CRUD permissions for each primary role on all custom TMS models.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-01-17","8.33","8","backend,security,rbac","Sprint 1","Establish the foundational security and user management framework, including login and Role-Based Access Control (RBAC).","Core System & Foundation","EPIC-001","Transport Management System","US-070","TASK-1101,TASK-2001,TASK-2101","Odoo Security,CSV","Medium","Medium","A Dispatch Manager can create a Trip, but not a Vehicle. A Finance Officer can create an Invoice, but not a Trip.","Code reviewed; Integration tests passing; Manual E2E testing for each role completed.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-06","2025-01-17","100%","QA team for verification.","N/A","Integration tests and manual E2E testing per role.","Critical security file, must be carefully reviewed.","Ensures data security and confidentiality by enforcing the principle of least privilege."
"TASK-2001","Define `tms.vehicle` Python Model","Create the Python file `models/tms_vehicle.py` and define the `TmsVehicle` class inheriting from `models.Model`. Add all fields as specified in REQ-1-200.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-01-31","5","3","backend,odoo-orm,master-data","Sprint 2","Implement core master data models for Customers, Drivers, Vehicles, Routes, and Materials.","Master Data Management","EPIC-002","Transport Management System","US-006","TASK-9999","Python,Odoo ORM","Low","Low","The `tms_vehicle` table is created with all fields having correct data types.","Code reviewed; Module installs without error; DB schema verified.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-20","2025-01-31","100%","N/A","N/A","Database schema inspection.","Creates a new database table.","Establishes the foundational master data for the vehicle fleet."
"TASK-2101","Extend `hr.employee` Model for Driver Details","Inherit the `hr.employee` model to add driver-specific fields: `is_driver`, `license_number`, `license_expiry_date`, and TMS `active` status field.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-01-31","4.17","2","backend,odoo-orm,master-data","Sprint 2","Implement core master data models for Customers, Drivers, Vehicles, Routes, and Materials.","Master Data Management","EPIC-002","Transport Management System","US-011","TASK-9999","Python,Odoo ORM","Low","Low","The new fields are added to the `hr_employee` database table.","Code reviewed; Module installs without error; DB schema verified.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-20","2025-01-31","100%","N/A","N/A","Database schema inspection.","Modifies a standard Odoo table.","Enables the creation of a compliant and operational driver pool."
"TASK-2011","Add Database Unique Constraint for Truck Number","Add a `_sql_constraints` attribute to the `tms.vehicle` model to enforce a unique constraint on the `truck_number_normalized` field at the database level.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-14","6.17","3","backend,database,validation","Sprint 3","Harden master data models with comprehensive validation rules and status management.","Master Data Management","EPIC-002","Transport Management System","US-071","TASK-2010","Python,Odoo ORM,PostgreSQL","Low","Low","An attempt to create two records with the same normalized truck number results in a `ValidationError`.","Code reviewed; Integration test passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-02-03","2025-02-14","100%","N/A","N/A","Integration test that attempts to create duplicates.","Adds a database constraint.","Ensures high data integrity for the vehicle master list."
"TASK-3001","Define `tms.trip` Model and State Machine","Create the `tms.trip` model with all core fields and relationships. Implement the `state` field with the full lifecycle ('Planned', 'Assigned', etc.).","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-28","12","5","backend,odoo-orm,trip-lifecycle","Sprint 4","Deliver core trip creation functionality and enable trip assignment.","Trip Management Lifecycle","EPIC-003","Transport Management System","US-026","TASK-2201,TASK-2301,TASK-2401","Python,Odoo ORM","Medium","Low","The `tms_trip` table is created in the database with all fields. The `state` field defaults to 'Planned'.","Code reviewed; DB schema verified; Module installs successfully.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-02-17","2025-02-28","100%","N/A","N/A","Database schema inspection.","Creates the primary transactional table.","Initiates the primary revenue-generating workflow of the system."
"TASK-3102","Implement Server-Side Assignment Validations","Add Python constraints to the `tms.trip` model to validate vehicle capacity against trip weight and re-validate driver's license expiry on save.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-02-28","6","5","backend,validation,business-rules","Sprint 4","Deliver core trip creation functionality and enable trip assignment.","Trip Management Lifecycle","EPIC-003","Transport Management System","US-027","TASK-3001","Python,Odoo ORM","Medium","Low","Saving a trip where `weight > vehicle_id.capacity` raises a `ValidationError`.","Code reviewed; Unit tests passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-02-17","2025-02-28","100%","N/A","N/A","Unit tests covering all validation scenarios.","Adds critical business logic.","Ensures efficient and compliant resource allocation."
"TASK-301","Create Driver Portal Base Structure and Routes","Create a new Odoo controller for the driver portal namespace (e.g., `/my/*`). Set up the basic OWL application structure, including a root component and routing for login and dashboard pages.","Task","Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2025-03-14","12","5","frontend,owl,driver-portal","Sprint 5","Develop core driver on-trip actions: viewing trips, starting trips, and logging critical events.","Driver Portal","EPIC-004","Transport Management System","US-046","US-058","OWL,JavaScript,Odoo Controllers","Medium","Low","Navigating to `/my/login` shows the driver login page. A successful login redirects to `/my/home`.","Code reviewed; E2E tests for routing passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-03-03","2025-03-14","100%","Backend team for auth endpoint.","N/A","E2E tests for navigation and login.","Exposes new public-facing URLs.","Enables drivers to access the system."
"TASK-303","Implement Driver Trip Status Transitions","Create secure Odoo controller endpoints for a driver to 'Start Trip' (Assigned -> In-Transit) and 'Mark as Delivered' (In-Transit -> Delivered) after POD upload. Implement state validation and authorization.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-03-14","10","7","backend,driver-portal,trip-lifecycle","Sprint 5","Develop core driver on-trip actions: viewing trips, starting trips, and logging critical events.","Driver Portal","EPIC-004","Transport Management System","US-049, US-052","TASK-301","Python,Odoo Controllers,Odoo ORM","Medium","Low","Calling the endpoint as the assigned driver successfully changes the trip status. Calling as an unassigned driver returns an access error.","Code reviewed; Unit and Integration tests passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-03-03","2025-03-14","100%","Frontend team to consume endpoints.","N/A","Security-focused integration tests.","Adds new API endpoints.","Provides real-time operational visibility and enables the billing process."
"TASK-6001","Develop Centralized Notification Service","Create a reusable service class or method in the TMS addon that can be called from anywhere in the code to send notifications. It should handle dispatching to both in-app (bus) and email channels.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-03-28","12","8","backend,notifications,refactoring","Sprint 6","Implement exception handling workflows and the core notification system.","Monitoring & Alerts","EPIC-007","Transport Management System","US-060","","Python,Odoo ORM,Odoo Job Queue","Medium","Low","A single function call can send an alert to a specific user via both email and in-app channels. The sending is done in a background job.","Code reviewed; Unit tests passing; Service is documented.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-03-17","2025-03-28","100%","N/A","N/A","Unit tests for the service class.","Provides a core service for other features.","Improves operational responsiveness and efficiency."
"TASK-311","Implement Backend for Expense Submission","Create the `tms.expense` model. Develop an Odoo controller to handle the expense form submission, including file upload to S3, creation of the expense record in 'Submitted' state, and triggering approval notifications.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-04-11","10","5","backend,driver-portal,expenses","Sprint 7","Deliver the complete expense submission workflow and driver document access.","Driver Portal","EPIC-004","Transport Management System","US-053","TASK-2022,TASK-6001","Python,Odoo ORM,Odoo Controllers,AWS S3","Medium","Low","A successful POST request creates a `tms.expense` record and uploads the attached file to S3.","Code reviewed; Integration tests passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-03-31","2025-04-11","100%","Frontend team.","N/A","Integration test for the submission endpoint.","Creates a new model and API endpoint.","Enables accurate and timely tracking of trip-related expenditures."
"TASK-401","Develop GSP API Client Service","Create a Python service class to handle all communication with the GSP API. It should manage authentication, data transformation (Odoo -> GSP JSON), and response parsing. Use AWS Secrets Manager for API keys.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-05-23","20","13","backend,api-integration,gst","Sprint 10","Implement the core high-risk GSP e-invoicing integration.","Financial Management & Invoicing","EPIC-005","Transport Management System","US-087","TASK-9010","Python,REST APIs,AWS Secrets Manager","High","High","The service can successfully authenticate with the GSP sandbox and submit a valid e-invoice payload.","Code reviewed; Unit tests passing; Successful connection to GSP sandbox.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-05-12","2025-05-23","100%","DevOps for secrets setup.","GSP API Sandbox and Documentation","Unit tests mocking the API; Integration tests against the sandbox.","Requires production secrets to be configured.","Ensures regulatory compliance with Indian GST laws."
"TASK-402","Implement E-Invoice Generation Workflow with Sync/Async Fallback","Implement the user-facing action to generate an e-invoice. This will first attempt a synchronous call to the GSP. On failure/timeout, it will enqueue a background job (RabbitMQ) for asynchronous retries.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2025-05-23","24","13","backend,api-integration,async","Sprint 10","Implement the core high-risk GSP e-invoicing integration.","Financial Management & Invoicing","EPIC-005","Transport Management System","US-087","TASK-401,TASK-9011","Python,Odoo ORM,RabbitMQ,Odoo Job Queue","High","High","A successful sync call updates the invoice immediately. A failed sync call provides immediate UI feedback and enqueues a job.","Code reviewed; Integration tests for both sync and async paths passing.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-05-12","2025-05-23","100%","DevOps for RabbitMQ setup.","GSP API Sandbox","Integration tests to simulate API success, failure, and timeouts.","Depends on a running RabbitMQ instance.","Automates a critical financial process."
"TASK-9002","Design and Implement Terraform for Amazon EKS Cluster","Using the official AWS EKS Terraform module, provision the Kubernetes control plane, node groups, and associated IAM roles and policies.","Task","Backlog","Critical","devops.eng1@company.com","product.owner@company.com","2024-12-20","24.67","21","devops,terraform,aws,eks","DevOps Sprint 0","Provision core AWS infrastructure required for application deployment.","DevOps, CI/CD & Infrastructure","EPIC-009","Transport Management System","WI-901","TASK-9001","Terraform,AWS EKS,Kubernetes,IAM","High","High","`kubectl` can connect to the new cluster successfully.","Terraform apply successful; `kubectl` connection verified; Test pod deployed.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-12-09","2024-12-20","100%","N/A","N/A","Deployment of a test application.","Creates the Kubernetes cluster.","Provides the foundational cloud infrastructure for hosting the application."
"TASK-9041","Implement GitHub Actions Workflow for CD","Create the `cd.yml` workflow file. Define jobs to authenticate with AWS, build and push the Docker image to ECR, and apply updated Kubernetes manifests to EKS.","Task","Backlog","Critical","devops.eng1@company.com","product.owner@company.com","2025-01-17","24.67","21","devops,ci-cd,github-actions,kubernetes","DevOps Sprint 1","Automate the deployment pipeline from code merge to running application in staging.","DevOps, CI/CD & Infrastructure","EPIC-009","Transport Management System","WI-912","TASK-9030,TASK-9020,TASK-9040","GitHub Actions,AWS ECR,Kubernetes","High","High","A merge to `main` automatically triggers the workflow and the staging environment is updated with the new version.","Successful end-to-end automated deployment triggered by a merge.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-06","2025-01-17","100%","Development team.","N/A","End-to-end deployment verification.","Automates all future deployments.","Automates the release process, enabling faster and more reliable deployments."